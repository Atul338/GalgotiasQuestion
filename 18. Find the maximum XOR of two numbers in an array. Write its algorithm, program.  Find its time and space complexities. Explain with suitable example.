Algorithm
Create a TrieNode class with two children (0 and 1).

Insert each number into the Trie by converting it to binary and inserting bit by bit.

For each number, compute the XOR with the Trie nodes to maximize the result.

CODE:
public class MaximumXOR {

  
    static class TrieNode {
        TrieNode[] children = new TrieNode[2];
    }

    public void insert(TrieNode root, int num) {
        TrieNode node = root;
      
        for (int i = 31; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node.children[bit] == null) {
                node.children[bit] = new TrieNode();
            }
            node = node.children[bit];
        }
    }

    public int findMaxXOR(TrieNode root, int num) {
        TrieNode node = root;
        int maxXOR = 0;
        for (int i = 31; i >= 0; i--) {
            int bit = (num >> i) & 1;
            int oppositeBit = 1 - bit; // To maximize XOR, we want the opposite bit
            
           
            if (node.children[oppositeBit] != null) {
                maxXOR |= (1 << i);
                node = node.children[oppositeBit];
            } else {
                node = node.children[bit];
            }
        }
        return maxXOR;
    }
    public int findMaximumXOR(int[] nums) {
        TrieNode root = new TrieNode();
        int maxResult = 0;
        
       
        for (int num : nums) {
            insert(root, num);
            maxResult = Math.max(maxResult, findMaxXOR(root, num));
        }
        
        return maxResult;
    }

    
    public static void main(String[] args) {
        MaximumXOR solver = new MaximumXOR();
        int[] nums = {3, 10, 5, 25, 2, 8};

        int result = solver.findMaximumXOR(nums);
        System.out.println("Maximum XOR: " + result);  
    }
}
