Algorithm :
Convert the string into a character array (for easy swapping).

Create a recursive function:

Base case: If the current index start == end, add the current permutation to the result.

Loop from start to end:

Swap the current character with the character at index i.

Recurse for the rest of the string (start + 1).

Backtrack by swapping back.

CODE:

import java.util.*;

public class StringPermutations {

    public static void generatePermutations(String str) {
        List<String> result = new ArrayList<>();
        permute(str.toCharArray(), 0, result);
        
        System.out.println("All permutations of \"" + str + "\":");
        for (String s : result) {
            System.out.println(s);
        }
    }

    private static void permute(char[] chars, int start, List<String> result) {
        if (start == chars.length - 1) {
            result.add(new String(chars));
            return;
        }

        for (int i = start; i < chars.length; i++) {
            swap(chars, start, i);                
            permute(chars, start + 1, result);     
            swap(chars, start, i);                 
        }
    }

    private static void swap(char[] chars, int i, int j) {
        char temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }

    public static void main(String[] args) {
        generatePermutations("ABC");
    }
}

time complexity: O(n Ã— n!)
