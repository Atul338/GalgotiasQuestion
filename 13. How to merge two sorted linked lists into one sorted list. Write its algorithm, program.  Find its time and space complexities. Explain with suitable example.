Algorithm:
Create a dummy node to help simplify edge cases.

Maintain a tail pointer, initially pointing to the dummy.

While both list1 and list2 are not null:

Compare list1.val and list2.val.

Attach the smaller node to tail.next.

Move the pointer of the smaller node's list forward.

Move the tail forward.

Once one list is empty, attach the remaining nodes from the other list.

Return dummy.next .

CODE:
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

public class MergeSortedLists {

    public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(-1);
        ListNode tail = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                tail.next = list1;
                list1 = list1.next;
            } else {
                tail.next = list2;
                list2 = list2.next;
            }
            tail = tail.next;
        }

      
        tail.next = (list1 != null) ? list1 : list2;

        return dummy.next;
    }


    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + (head.next != null ? " -> " : ""));
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        
        ListNode list1 = new ListNode(1);
        list1.next = new ListNode(3);
        list1.next.next = new ListNode(5);

        
        ListNode list2 = new ListNode(2);
        list2.next = new ListNode(4);
        list2.next.next = new ListNode(6);

        ListNode merged = mergeTwoLists(list1, list2);
        System.out.print("Merged List: ");
        printList(merged);
    }
}



Time	O(n + m)
Space	O(1)
