Algorithm:
Initialize an empty hash map and a variable currentSum = 0.

Loop through the array:

Add the current element to currentSum.

Check if currentSum - K exists in the hash map. If it does, then the subarray sum equals K.

Add currentSum to the hash map (increment its frequency).

If the loop completes without finding such a subarray, return false.
CODE:
import java.util.HashMap;

public class SubarraySumEqualToK {
    public static boolean subarraySumEqualToK(int[] nums, int K) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int currentSum = 0;

       
        for (int num : nums) {
            currentSum += num; 

          
            if (map.containsKey(currentSum - K)) {
                return true; // Subarray sum equals K
            }

       
            map.put(currentSum, map.getOrDefault(currentSum, 0) + 1);
        }

        return false;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 7, 5};
        int K = 12;
        System.out.println(subarraySumEqualToK(nums, K));
    }
}
