Algorithm
Initialize maxProd and minProd to the first element of the array, and the result to the same value.

Traverse through the array from the second element:

For each element, calculate the potential maximum and minimum products.

Update maxProd and minProd.

Update the result with the maximum of the current result and maxProd.

Return the result

CODE:
public class MaximumProductSubarray {

    public int maxProduct(int[] nums) {
       
        if (nums == null || nums.length == 0) return 0;

        
        int maxProd = nums[0], minProd = nums[0], result = nums[0];

       
        for (int i = 1; i < nums.length; i++) {
           
            if (nums[i] < 0) {
                int temp = maxProd;
                maxProd = minProd;
                minProd = temp;
            }

         
            maxProd = Math.max(nums[i], maxProd * nums[i]);
            minProd = Math.min(nums[i], minProd * nums[i]);

            
            result = Math.max(result, maxProd);
        }

        return result;
    }

    public static void main(String[] args) {
        MaximumProductSubarray solver = new MaximumProductSubarray();
        
        int[] nums = {2, 3, -2, 4};
        int result = solver.maxProduct(nums);
        System.out.println("Maximum Product Subarray: " + result); 
    }
}


the time complexity is O(n)
the space complexity is O(1).
