Algorithm :
Let A = nums1 and B = nums2, ensure A.length ≤ B.length.

Set low = 0, high = length of A.

While low ≤ high:

i = (low + high) / 2 → partition A

j = (total length + 1)/2 - i → partition B

Let:

maxLeftA = A[i - 1] or -∞ if i = 0

minRightA = A[i] or ∞ if i = length of A

maxLeftB = B[j - 1] or -∞ if j = 0

minRightB = B[j] or ∞ if j = length of B

Check:

If maxLeftA ≤ minRightB and maxLeftB ≤ minRightA, we have the correct partition:

If total length is even → median = (max(maxLeftA, maxLeftB) + min(minRightA, minRightB)) / 2

If odd → median = max(maxLeftA, maxLeftB)

Else adjust search range:

If maxLeftA > minRightB → move high = i - 1

Else → move low = i + 1

CODE:
public class MedianOfTwoSortedArrays {

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
       
        if (nums1.length > nums2.length)
            return findMedianSortedArrays(nums2, nums1);

        int x = nums1.length;
        int y = nums2.length;

        int low = 0, high = x;

        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (x + y + 1) / 2 - partitionX;

            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];

            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((x + y) % 2 == 0) {
                    return ((double)Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;
                } else {
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) {
                high = partitionX - 1;
            } else {
                low = partitionX + 1;
            }
        }

        throw new IllegalArgumentException("Input arrays are not sorted properly.");
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 3};
        int[] nums2 = {2};

        double median = findMedianSortedArrays(nums1, nums2);
        System.out.println("Median is: " + median); 
    }
}


Time	O(log(min(n, m)))
Space	O(1)
