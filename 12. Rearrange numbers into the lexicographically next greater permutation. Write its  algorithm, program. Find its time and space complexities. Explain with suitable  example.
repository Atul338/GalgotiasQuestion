Algorithm :
This is a well-known algorithm often used in permutations and combinatorics:

Find the pivot (first decreasing element from the end):

Traverse the array from the end and find the first index i such that nums[i] < nums[i + 1].

If no such i exists, the array is the last permutation. Reverse it.

Find the successor (next bigger number):

Find the smallest number greater than nums[i] to the right of i (say index j such that nums[j] > nums[i]).

Swap nums[i] and nums[j].

Reverse the part of the array to the right of index i

CODE:
import java.util.Arrays;

public class NextPermutation {

    public static void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 2;

        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        if (i >= 0) {
            int j = n - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }

        reverse(nums, i + 1, n - 1);
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start++, end--);
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3};
        nextPermutation(arr);
        System.out.println("Next Permutation: " + Arrays.toString(arr));
    }
}
