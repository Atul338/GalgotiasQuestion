Algorithm :
If the input array is empty, return "".

Loop through characters of the first string (since LCP can't be longer than the first string).

For each character ch at index i:

Compare it with the character at the same index in all other strings.

If any string is shorter or has a different character at index i, return the substring from index 0 to i from the first string.

If no mismatch found, return the first string (as it is the LCP).

CODE:
public class LongestCommonPrefix {

    public static String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0)
        return "";

        for (int i = 0; i < strs[0].length(); i++) {
            char ch = strs[0].charAt(i);
            for (int j = 1; j < strs.length; j++) {
                if (i >= strs[j].length() || strs[j].charAt(i) != ch) {
                    return strs[0].substring(0, i);
                }
            }
        }

        return strs[0];
    }

    public static void main(String[] args) {
        String[] input1 = {"flower", "flow", "flight"};
        System.out.println("Longest Common Prefix: " + longestCommonPrefix(input1)); 

    }
}
