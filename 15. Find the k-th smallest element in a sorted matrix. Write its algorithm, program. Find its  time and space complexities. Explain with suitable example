Algorithm 
Find the minimum and maximum elements (low = matrix[0][0], high = matrix[n-1][n-1]).

Perform binary search on the range [low, high].

For a midpoint value mid, count how many elements are ≤ mid using an efficient scan.

Adjust the binary search bounds based on the count:

If count < k, move right (low = mid + 1)

If count ≥ k, move left (high = mid)

When low == high, you've found the k-th smallest element.

CODE:
public class KthSmallestInSortedMatrix {
    
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int low = matrix[0][0];
        int high = matrix[n - 1][n - 1];

        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = countLessEqual(matrix, mid);
            
            if (count < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    private int countLessEqual(int[][] matrix, int target) {
        int count = 0;
        int n = matrix.length;
        int row = n - 1;
        int col = 0;

        while (row >= 0 && col < n) {
            if (matrix[row][col] <= target) {
                count += row + 1;
                col++;
            } else {
                row--;
            }
        }
        return count;
    }

    
    public static void main(String[] args) {
        KthSmallestInSortedMatrix solver = new KthSmallestInSortedMatrix();

        int[][] matrix = {
            {1,  5,  9},
            {10, 11, 13},
            {12, 13, 15}
        };
        int k = 8;

        System.out.println("The " + k + "-th smallest element is: " + solver.kthSmallest(matrix, k));
    }
}


ime	O(n * log(max - min))
Space	O(1)
